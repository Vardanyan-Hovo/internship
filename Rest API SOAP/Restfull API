2)REST API?
    REST API also referred to as a RESTful API or RESTful web service.
    RESTful API is an "ARCHITECTURAL STYLE" for an application program interface (API) that uses HTTP requests to access and use data
   
    A RESTful API uses existing HTTP methodologies defined by the RFC 2616 protocol, such as:
    POST,           creating
    GET,            reading
    PUT/PATCH,      updating
    DELETE,         deleting
   
    a)Client-server based.
        There should be a clear delineation between the client and server.
            Հաճախորդի և սերվերի միջև պետք է լինի հստակ սահմանազատում:
        UI and request-gathering concerns are the client's domain.
            UI-ի և հարցումների հավաքագրման խնդիրները հաճախորդի տիրույթն են.
        Data access, workload management and security are the server's domain.
            Տվյալների հասանելիությունը, ծանրաբեռնվածության կառավարումը և անվտանգությունը սերվերի տիրույթն են:

    b)Layered system.//շերտերից սերվերների
        REST allows for an architecture composed of multiple layers of servers.
        REST-ը թույլ է տալիս ստեղծել մի ճարտարապետություն, որը բաղկացած է սերվերների մի քանի շերտերից:
 
    c)Stateless
        All calls are stateless; nothing can be retained by the RESTful service between executions.

    d)Use of a uniform interface (UI)
        Resources should be uniquely identifiable through a single URL, and only by using the underlying methods
         of the network protocol, such as DELETE, PUT and GET with HTTP, should it be possible to manipulate a resource.
        Միատեսակ ինտերֆեյսի (UI) օգտագործումը: Ռեսուրսները պետք է եզակի նույնականացվեն մեկ URL-ի միջոցով և միայն օգտագործելով ցանցային արձանագրության հիմքում ընկած մեթոդները, 
        ինչպիսիք են DELETE, PUT և GET-ը HTTP-ով, եթե հնարավոր լինի շահարկել ռեսուրսը:
    e)Resource Caching
        All resources should allow caching unless explicitly indicated that caching is not possible.
        Բոլոր ռեսուրսները պետք է թույլ տան քեշավորում, եթե հստակորեն նշված չէ, որ քեշավորումը հնարավոր չէ:
    f)Code on demand.//Կոդ ըստ պահանջի.
        Most of the time, a server will send back static representations of resources in the form of XML or JSON. However, when necessary, servers can send executable code to the client.
        Ժամանակի մեծ մասը սերվերը հետ է ուղարկում ռեսուրսների ստատիկ ներկայացումներ XML-ի կամ JSON-ի տեսքով: Այնուամենայնիվ, անհրաժեշտության դեպքում, սերվերները կարող են գործարկվող կոդ ուղարկել հաճախորդին:
    g)API versioning  
        Endpoint URLs shouldn't be invalidated when used internally or with other applications.
        /api/login
        /api/logup
        /api/v1/login
        /api/v1/logup
    




Currently, several companies provide models for developers to use; the models provided by Amazon S3, Cloud Data Management Interface (CDMI) and OpenStack Swift are the most popular.
